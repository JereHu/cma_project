---
title: "just programming"
format: html
editor: visual
---

```{r}
library("readr") 
library("sf") 
library("ggplot2")
library("dplyr")
library("tmap")
library("terra")
library("ggspatial")
```


Reading in Posmo Data, cropping it so that home location is not shown and filter bike data
```{r}
posmo <- read_delim("datasets/posmo_2023-04-07T00_00_00+02_00-2023-06-02T23_59_59+02_00.csv")

# make sure x and y do not have na values
posmo<-posmo[!is.na(posmo$lon_x),]
posmo<-posmo[!is.na(posmo$lat_y),]

posmo_sf <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326, remove = FALSE)

st_crs(posmo_sf)
posmo_sf <- st_transform(posmo_sf, crs = 2056)
st_crs(posmo_sf)

# filter out home coordinates
# make polygon https://www.keene.edu/campus/maps/tool/ 
p1 = st_point(c(8.4265439, 47.3955710))
p2 = st_point(c(8.4267632, 47.3898521))
p3 = st_point(c(8.4179950, 47.3890680))
p4 = st_point(c(8.4178061, 47.3923967))

# make polygon
poly = st_multipoint(c(p1, p2, p3, p4)) %>%
  st_cast("POLYGON") %>%
  st_sfc(crs = 4326) %>%
  st_transform(crs = 2056)

# create function that 'cuts' out the area covered by the polygon
not_covered_by  = function(x, y) !st_covered_by(x, y)

# group weekdays, leave out everything that's not bike data, filter the polygon
posmo_sf_cut <- posmo_sf |> 
  group_by("weekday") |>
  group_by("transport_mode") |>
  filter(transport_mode == "Bike")%>%
  st_filter(poly, .predicate=not_covered_by)

# map in ggplot (no background map)
ggplot(data = posmo_sf_cut)+
  geom_sf(aes(colour = weekday), alpha = 0.5)+
  coord_sf(datum = 2056) 

tmap_mode("view")
tm_shape(posmo_sf_cut) +
  tm_dots("weekday") 

```

Download DEM from many tifs from swisstopo alti3D (csv)
```{r}

#csv has all download paths from alti3d tiles  https://www.swisstopo.admin.ch/en/geodata/height/alti3d.html 
all_tif <- read.csv("datasets/alti3D_all.csv", header = FALSE)

# terra help https://rspatial.org/spatial-terra/8-rastermanip.html 

#download all files to folder
# for (fi in all_tif$V1){
#   outfile <- basename(fi)
# 
#   print(outfile)
# 
#   download.file(fi, paste0("datasets/alti3d_05/", outfile),mode = "wb")  # mode (binary) very important
# }

# takes all files with .tif from a folder
file_list <- list.files("datasets/alti3d_05",".tif",full.names = TRUE)

# makes a virtual raster layer from the files
vrt(file_list, "altivrt.vrt",overwrite = TRUE)

# import the data from the virtual raster layer
virt_rast <- rast("altivrt.vrt")

plot(virt_rast)


```

<!-- Trying to plot it with tmap, does not work currently, as I suppose tmap will load all data in memory, as opposed to terra. -->
<!-- Need to use ggspatial (made for spatRasters) -> layer_spatial -->
<!-- This loads everything in memory as well. (4GB, crashed the program) -->

<!-- ```{r} -->
<!-- ggplot() + -->
<!-- layer_spatial(virt_rast) -->
<!-- ``` -->

Annotating the posmo data with the DEM data
extract() dem values based on posmo_sf_cut

```{r}
DEM <- extract(virt_rast, posmo_sf_cut)

posmo_sf_cut$height <- DEM$altivrt

```

Plotting it.
```{r}
ggplot() +
  geom_sf(data = posmo_sf_cut, aes(colour = height), alpha = .3) + 
  coord_sf(datum = 2056)

tm_shape(posmo_sf_cut) +
  tm_dots("height") 
```

time to posix, to make sure I'm able to group
```{r}
posmo_sf_cut$datetime <- as.POSIXct(posmo_sf_cut$datetime)
```

temporal window, need N and E, take that from geometry column, add a grouping column date, use lead and lag to compute euclidian distances (which works thanks to Swiss Coordinate system)
```{r}
bike <- posmo_sf_cut |>
  mutate(E = st_coordinates(geometry)[,1]) |> 
  mutate(N = st_coordinates(geometry)[,2]) |> 
  group_by(date = lubridate::date(datetime)) |> 
    mutate(
        nMinus2 = sqrt((lag(N, 2) - N)^2 + (lag(E, 2) - E)^2), # distance to pos -20 sec
        nMinus1 = sqrt((lag(N, 1) - N)^2 + (lag(E, 1) - E)^2), # distance to pos -10 sec
        nPlus1  = sqrt((N - lead(N, 1))^2 + (E - lead(E, 1))^2), # distance to pos +10 sec
        nPlus2  = sqrt((N - lead(N, 2))^2 + (E - lead(E, 2))^2) # distance to pos +20 sec
    ) |> 
  ungroup()
```

speed, defined as the average of step behind and step in front divided by the timedifference of datetime of these two steps. *3.6 to get km/h
```{r}
bike <- bike |> 
  mutate(
    speed = ((nPlus1 + nMinus1)/as.integer(difftime(lead(datetime), lag(datetime), "secs")))*3.6
  )
```

stops, defined as the current and next speed is <1 km/h, it is a stop (determined from a quick look at the speed data. a.k.a 20 secs with < 1km/h is stop)

```{r}
bike <- bike |>
    ungroup() |>
    mutate(static = (speed + lead(speed))/2 < 1)

bike |>
  ggplot(aes(E, N)) +
  geom_path() +
  geom_point(aes(color = static)) +
  coord_fixed()

```

```{r}
bike_filter <- bike |>
    filter(!static)

tm_shape(bike_filter) +
  tm_dots("speed") 
```

add gradient (for each point, calculate height difference to next point, divide by distance to next point and multiply by 100 to get percent). There were some endpoints of routes that calculated to 400% gradient. Therefore a filter was set to exclude > +-50% gradients.
The decision to smooth the gradient with a moving window (+- one point) was made, so that there are not such extreme jumps (max was still 40%, min -30%, which is unlikely in the study area).
```{r}
bike_gradient <- bike_filter |> 
  mutate(
    gradient = (lead(height)-height)/nPlus1*100
  ) |> 
  filter(gradient < 50 ) |> 
  filter(gradient > -50) |> 
  mutate(
    gradientplus1 = lead(gradient),
    gradientminus1 = lag(gradient)
  ) |>  
  rowwise() |> 
  mutate(
    gradient_smooth = mean(c(gradient, gradientplus1, gradientminus1))
    ) |> 
  ungroup()

tm_shape(bike_gradient) +
  tm_dots("gradient_smooth") 

ggplot(bike_gradient, aes(gradient_smooth)) +
  geom_histogram(binwidth = 1)
```


segment data based on gradient (>3%, supported by Parkin et al. 2010, Castro et al. 2022)
there is not much research on the subject of steepness definition for bikers in GIS. Parkin et al. 2010 did the groundwork, and multiple others rely on their work (Castor et al. 2022, Clarry et al. 2019)
```{r}
bike_gradient <- bike_gradient |> 
  mutate(
    steep_up = gradient > 3
  )

rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

bike_gradient <- bike_gradient |>
    mutate(segment_id = rle_id(steep_up))
```

```{r}
tm_shape(bike_gradient) +
  tm_dots("segment_id") 
```



