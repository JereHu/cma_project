---
title: "just programming"
format: 
  html:
    code-fold: true
editor: visual
---

```{r}
library("readr") 
library("sf") 
library("ggplot2")
library("dplyr")
library("tmap")
library("terra")
library("ggspatial")
```



```{r}
# Reading in Posmo Data, cropping it so that home location is not shown and filter bike data
posmo <- read_delim("datasets/posmo_2023-04-07T00_00_00+02_00-2023-06-02T23_59_59+02_00.csv")

# make sure lat and long do not have na values
posmo<-posmo[!is.na(posmo$lon_x),]
posmo<-posmo[!is.na(posmo$lat_y),]

posmo_sf <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326, remove = FALSE)

st_crs(posmo_sf)
posmo_sf <- st_transform(posmo_sf, crs = 2056)
st_crs(posmo_sf)

# filter out home coordinates
# make polygon https://www.keene.edu/campus/maps/tool/ 
p1 = st_point(c(8.4265439, 47.3955710))
p2 = st_point(c(8.4267632, 47.3898521))
p3 = st_point(c(8.4179950, 47.3890680))
p4 = st_point(c(8.4178061, 47.3923967))

# make polygon
poly = st_multipoint(c(p1, p2, p3, p4)) %>%
  st_cast("POLYGON") %>%
  st_sfc(crs = 4326) %>%
  st_transform(crs = 2056)

# create function that 'cuts' out the area covered by the polygon
not_covered_by  = function(x, y) !st_covered_by(x, y)

#leave out everything that's not bike data, filter the polygon, also leave out 4-11-2023, 4-25-2023 and 4-28-2023, because that was not a bike tour, only very short trips
posmo_sf_cut <- posmo_sf |> 
  filter(transport_mode == "Bike")%>%
  st_filter(poly, .predicate=not_covered_by) |> 
  ungroup() |> 
  mutate(
    datetime = as.POSIXct(datetime),
    date = lubridate::date(datetime)
    ) |> 
  filter(date != as.Date('2023-04-11') & date != as.Date('2023-04-25') & date != as.Date('2023-04-28')) |> 
  select(-user_id, -place_name)

# map in ggplot (no background map)
# ggplot(data = posmo_sf_cut)+
#   geom_sf(aes(colour = date), alpha = 0.5)+
#   coord_sf(datum = 2056) 

tmap_mode("view")
tm_shape(posmo_sf_cut) +
  tm_dots("date") 

```

```{r}
head(posmo_sf_cut, n=2)
```

Download DEM from many tifs from swisstopo alti3D (csv)

![Manually Selected area of Interest on swissALTI3D](images/Screenshot_DEM_selection.jpg)
```{r}

#csv has all download paths from alti3d tiles  https://www.swisstopo.admin.ch/en/geodata/height/alti3d.html 
all_tif <- read.csv("datasets/alti3D_all.csv", header = FALSE)

# terra help https://rspatial.org/spatial-terra/8-rastermanip.html 

#download all files to folder, commented out because it only has to run once
# for (fi in all_tif$V1){
#   outfile <- basename(fi)
# 
#   print(outfile)
# 
#   download.file(fi, paste0("datasets/alti3d_05/", outfile),mode = "wb")  # mode (binary) very important
# }

# takes all files with .tif from a folder
file_list <- list.files("datasets/alti3d_05",".tif",full.names = TRUE)

# makes a virtual raster layer from the files
vrt(file_list, "altivrt.vrt",overwrite = TRUE)

# import the data from the virtual raster layer
virt_rast <- rast("altivrt.vrt")

plot(virt_rast)


```

<!-- Trying to plot it with tmap, does not work currently, as I suppose tmap will load all data in memory, as opposed to terra. -->
<!-- Need to use ggspatial (made for spatRasters) -> layer_spatial -->
<!-- This loads everything in memory as well. (4GB, crashed the program) -->

<!-- ```{r} -->
<!-- ggplot() + -->
<!-- layer_spatial(virt_rast) -->
<!-- ``` -->

Annotating the posmo data with the DEM data
extract() dem values based on posmo_sf_cut

```{r}
DEM <- extract(virt_rast, posmo_sf_cut)

posmo_sf_cut$height <- DEM$altivrt

tm_shape(posmo_sf_cut) +
  tm_dots("height") 

```



```{r}
# temporal window, need N and E, take that from geometry column, add a grouping column date, use lead and lag to compute euclidian distances (which works thanks to Swiss Coordinate system)
bike <- posmo_sf_cut |>
  mutate(E = st_coordinates(geometry)[,1]) |> 
  mutate(N = st_coordinates(geometry)[,2]) |> 
  group_by(date) |> 
    mutate(
        nMinus1 = sqrt((lag(N, 1) - N)^2 + (lag(E, 1) - E)^2), # distance to pos -10 sec
        nPlus1  = sqrt((N - lead(N, 1))^2 + (E - lead(E, 1))^2), # distance to pos +10 sec
    ) |> 
  ungroup()
```


```{r}
# speed, defined as the average of step behind and step in front divided by the timedifference of datetime of these two steps. *3.6 to get km/h
bike <- bike |> 
  mutate(
    speed = ((nPlus1 + nMinus1)/as.integer(difftime(lead(datetime), lag(datetime), "secs")))*3.6
  )
```

stops, defined as the current and next speed is <1 km/h, it is a stop (determined from a quick look at the speed data. a.k.a 20 secs with < 1km/h is stop)


```{r}
bike <- bike |>
    ungroup() |>
    mutate(static = ifelse((speed + lead(speed) + lag(speed))/3 < 1, TRUE, nPlus1 < 2 | nMinus1 < 2))

bike |>
  ggplot(aes(E, N)) +
  geom_path() +
  geom_point(aes(color = static), alpha = 0.3) +
  coord_fixed()

```

```{r}
bike_filter <- bike |>
    filter(!static)

tm_shape(bike_filter) +
  tm_dots("speed") 
```

add gradient (for each point, calculate height difference to next point, divide by distance to next point and multiply by 100 to get percent). There were some endpoints of routes that calculated to 400% gradient. Therefore a filter was set to exclude > +-50% gradients.
The decision to smooth the gradient with a moving window (+- one point) was made, so that there are not such extreme jumps (max was still 40%, min -30%, which is unlikely in the study area).
![Graphical representation for gradient of point A. Gradient m = x/y * 100. Where x is the distance to the next point, y is the height difference between the points.](images/slope.png)


```{r}
bike_gradient <- bike_filter |> 
  mutate(
    gradient = (lead(height)-height)/nPlus1*100
  )

ggplot(bike_gradient, aes(gradient)) +
  geom_histogram(binwidth = 1)
```


```{r}
bike_gradient <- bike_gradient |> 
  filter(gradient < 50 ) |> 
  filter(gradient > -50) |> 
  mutate(
    gradientplus1 = lead(gradient),
    gradientminus1 = lag(gradient)
  ) |>  
  rowwise() |> 
  mutate(
    gradient_smooth = mean(c(gradient, gradientplus1, gradientminus1))
    ) |> 
  ungroup()
```

This led to the following distribution which seems reasonable.
```{r}
ggplot(bike_gradient, aes(gradient_smooth)) +
  geom_histogram(binwidth = 1)
```

```{r}
tm_shape(bike_gradient) +
  tm_dots("gradient_smooth")
```



segment data based on gradient (>3%, supported by Parkin et al. 2010, Castro et al. 2022)
there is not much research on the subject of steepness definition for bikers in GIS. Parkin et al. 2010 did the groundwork, and multiple others rely on their work (Castor et al. 2022, Clarry et al. 2019)

Also check if there are single values that are surrounded by other values => set to other values if that is the case. (e.g. if a downhill segment is surrounded by not downhill, it's probably not a downhill, just didn't hit the exclusion criteria.)
```{r}
bike_gradient <- bike_gradient |> 
  mutate(
    steep_up = gradient_smooth > 5,
    steep_down = gradient_smooth < -5
  )

#removing single FALSE/TRUE values
# REVIEW AGAIN; JUST TO MAKE SURE IT IS CORRECT
bike_gradient <- bike_gradient |> 
  mutate(
    steep_up = ifelse(!steep_up, lag(steep_up) & lead(steep_up), steep_up),
    steep_up = ifelse(steep_up, lag(steep_up) | lead(steep_up), steep_up),
    steep_down = ifelse(!steep_down, lag(steep_down) & lead(steep_down), steep_down),
    steep_down = ifelse(steep_down, lag(steep_down) | lead(steep_down), steep_down)
  )

rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

bike_gradient <- bike_gradient |>
    mutate(segment_id_up = rle_id(steep_up),
           segment_id_down = rle_id(steep_down))
```

```{r}
tm_shape(bike_gradient) +
  tm_dots("segment_id_up") 
```

- exclude downhill segments (if segment mean gradient is <-3)
  - use logic that if neither a downhill not uphill, it's flat
  - and otherwise it's the other
=> DONE, in avg_speeds
  
- analyse difference between segments that follow a steep part and those that preceed it
  - linear regression => make a df with speed difference before and after a steep part, and the steepness of the steep part => lm(diff~steepness)
  - what to do with segments that are both?


This creates a new df, with differentiated up/down/flat segments, so that it includes uphill segments and downhill segments.
```{r}
avg_speeds <- bike_gradient |> 
  group_by(segment_id_up, segment_id_down) |> 
  summarise(
    seg_avg = mean(speed),
    uphill = ifelse(all(steep_up), TRUE, FALSE),
    flat = ifelse(all(!steep_up & !steep_down), TRUE, FALSE),
    downhill = ifelse(all(steep_down), TRUE, FALSE),
    avg_grad = mean(gradient_smooth),
    avg_height = mean(height)
  ) 

head(avg_speeds, n=3)
```

```{r}
tm_shape(avg_speeds)+
  tm_dots("seg_avg")
```

-- toDO:
Linear regression:
  - calculate speed differences (exclude downhill) of flat segments following steep and flat segments before steepness
  - regress with gradient


For some reason, there are a lot of missing values when using lead and lag. These missing values are often where the condition is true. WHY?
```{r}
avg_speeds_reg <- avg_speeds |> 
  mutate(
    before_steep = if_else(flat&lead(uphill), TRUE, FALSE, missing = TRUE),
    after_steep = if_else(flat&lag(uphill), TRUE, FALSE, missing = TRUE)
  )
```


create for loop, so that every steep part gets a column where the average speed difference from the part before and the part after is calculated.
Then take only these columns and put them in a linear regression, with speed diff and steepness of the gradient.
```{r}
#loops over rows, calculates a speed on uphill rows, that are followed and preceded by flat parts
#doesn't consider the first and last row (due to no preceding/following segments)
avg_speeds <- avg_speeds |> 
  mutate(speed_diff = 0)

for(i in 2:(nrow(avg_speeds)-1)) {       # for-loop over rows
  if (avg_speeds[i, ]$uphill & avg_speeds[i+1, ]$flat & avg_speeds[i-1, ]$flat){
    avg_speeds[i, ]$speed_diff <- avg_speeds[i-1, ]$seg_avg - avg_speeds[i+1, ]$seg_avg
  }
  else {
    avg_speeds[i, ]$speed_diff <- NA
  }
}
```

```{r}
reg <- lm(avg_speeds$speed_diff~avg_speeds$avg_grad)

#get intercept and slope value
coeff<-coefficients(reg)
intercept<-coeff[1]
slope<- coeff[2]

summary(reg)
```

```{r}
avg_speeds |> 
  ggplot()+
  geom_histogram(aes(speed_diff), binwidth = 2.5)+
  geom_point(aes(speed_diff, avg_grad), color = "darkblue")+
  # geom_abline(intercept = intercept, slope = slope, color="red", 
  #              linetype="dashed", size=1.5) +
  ylim(0, 15)



```

```{r}
avg_speeds |> 
  ggplot(aes(x = 1:nrow(avg_speeds),  y = avg_height))+
  geom_point(aes(color = uphill), na.rm = TRUE)+
  geom_line(na.rm = TRUE) +
  xlab("segment number (based on time)") +
  ylab("average height per segment [m]")
```



